{"version":3,"sources":["../src/forbidExtraProps.js"],"names":["forbidExtraProps","zeroWidthSpace","semaphore","brand","fn","isBranded","value","propTypes","TypeError","forbidUnknownProps","props","_","componentName","unknownProps","Object","keys","filter","prop","length","join"],"mappings":";;;qBAgBwBA,gB;;AAhBxB;;;;AACA;;;;AAEA;;;;;;;;AAEA,IAAMC,iBAAiB,QAAvB;AACA,IAAMC,YAAY,EAAlB;;AAEA,SAASC,KAAT,CAAeC,EAAf,EAAmB;AACjB,SAAO,yBAAOA,EAAP,sBAAcH,cAAd,EAA+BC,SAA/B,EAAP;AACD;;AAED,SAASG,SAAT,CAAmBC,KAAnB,EAA0B;AACxB,SAAOA,SAASA,MAAML,cAAN,MAA0BC,SAA1C;AACD;;AAEc,SAASF,gBAAT,CAA0BO,SAA1B,EAAqC;AAClD,MAAI,CAAC,gCAAcA,SAAd,CAAL,EAA+B;AAC7B,UAAM,IAAIC,SAAJ,CAAc,mCAAd,CAAN;AACD;AACD,MAAI,sBAAID,SAAJ,EAAeN,cAAf,KAAkC,CAACI,UAAUE,UAAUN,cAAV,CAAV,CAAvC,EAA6E;AAC3E,UAAM,IAAIO,SAAJ,CAAc,wIAAd,CAAN;AACD;;AAED,SAAO,yBAAO,EAAP,EAAWD,SAAX,sBAEJN,cAFI,EAEaE;AAAM,aAASM,kBAAT,CAA4BC,KAA5B,EAAmCC,CAAnC,EAAsCC,aAAtC,EAAqD;AAC3E,UAAMC,eAAeC,OAAOC,IAAP,CAAYL,KAAZ,EAAmBM,MAAnB,CAA0B;AAAA,eAAQ,CAAC,sBAAIT,SAAJ,EAAeU,IAAf,CAAT;AAAA,OAA1B,CAArB;AACA,UAAIJ,aAAaK,MAAb,GAAsB,CAA1B,EAA6B;AAC3B,eAAO,IAAIV,SAAJ,QAAiBI,aAAjB,uCAAwDC,aAAaM,IAAb,CAAkB,IAAlB,CAAxD,EAAP;AACD;AACD,aAAO,IAAP;AACD;;AANiB,WAAeV,kBAAf;AAAA,MAFb,EAAP;AAUD","file":"forbidExtraProps.js","sourcesContent":["import has from 'has';\nimport assign from 'object.assign';\n\nimport isPlainObject from './helpers/isPlainObject';\n\nconst zeroWidthSpace = '\\u200b';\nconst semaphore = {};\n\nfunction brand(fn) {\n  return assign(fn, { [zeroWidthSpace]: semaphore });\n}\n\nfunction isBranded(value) {\n  return value && value[zeroWidthSpace] === semaphore;\n}\n\nexport default function forbidExtraProps(propTypes) {\n  if (!isPlainObject(propTypes)) {\n    throw new TypeError('given propTypes must be an object');\n  }\n  if (has(propTypes, zeroWidthSpace) && !isBranded(propTypes[zeroWidthSpace])) {\n    throw new TypeError('Against all odds, you created a propType for a prop named after the zero-width space - which, sadly, conflicts with `forbidExtraProps`');\n  }\n\n  return assign({}, propTypes, {\n    // eslint-disable-next-line prefer-arrow-callback\n    [zeroWidthSpace]: brand(function forbidUnknownProps(props, _, componentName) {\n      const unknownProps = Object.keys(props).filter(prop => !has(propTypes, prop));\n      if (unknownProps.length > 0) {\n        return new TypeError(`${componentName}: unknown props found: ${unknownProps.join(', ')}`);\n      }\n      return null;\n    }),\n  });\n}\n"]}